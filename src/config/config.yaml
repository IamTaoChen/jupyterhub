allowed_images:
  scipy: my/jupyter-scipy:latest
  GPU: my/jupyter-gpu:latest
  qutip: my/jupyter-qutip:latest
  qiskit: my/jupyter-qiskit:latest
  arc: my/jupyter-arc:latest
  tensorflow: my/jupyter-tensorflow:latest
  code-server: 
    image: my/code-server:latest
    allow_colab: false
  streamlit: my/streamlit:latest
  minimal-notebook: jupyter/minimal-notebook

# # not implemented yet
# form:
#   logo_url_default: https://cdn2.modelbit.com/_next/static/media/modelbit-logo-only.a802bbca.svg
#   python_versions_default: ['python-3.11']
#   data:
#     - name: Modelbit
#       description: Python environment for working with the Modelbit package and ecosystem. Tools include modelbit and exploratory packages like sklearn, etc.
#       logo_url: https://cdn2.modelbit.com/_next/static/media/modelbit-logo-only.a802bbca.svg
#       python_versions: ['python-3.9', 'python-3.8', 'python-3.7']
#       image: modelbit-docker-image

#     - name: OtherEnvironment
#       description: Another description.
#       logo_url: https://other-logo-url.com
#       python_versions: ['python-3.9', 'python-3.8']
#       image: other-docker-image



groups:
  collaborative:
    users:
      - collab-1
      - collab-2
    admins:
      - admins

roles:
  - name: member-access-servers
    scopes:
      - access:servers!group=Member
    groups:
      - Member

  - name: collab-access
    scopes:
      - access:servers!user=collab-1
      - admin:servers!user=collab-1
      - admin-ui
      - list:users!user=collab-eqe1
    groups:
      - Member

  - name: collab-access
    scopes:
      - access:servers!user=collab-2
      - admin:servers!user=collab-2
      - admin-ui
      - list:users!user=collab-2
    groups:
      - Member

ad:
  enabled: true
  # allow_users:
  ## If not empty, only users in the list will be allowed to login. it's used for testing.
  # - xxx
  config:
    host: ad.example.com
    port: 389
    base_dn: DC=ds,DC=example,DC=com
    bind_dn:
    bind_pw: PASSWORD
    user_search_rdn: OU=Users
    group_search_rdn: OU=Groups
    user_search_filter: (cn=*)
    user_username_attribute: sAMAccountName
    start_uid: 1615200000
    # cal the users' uid from AD by sid.
    # def sid_to_uid(cls, sid: str, base_uid: int = 1615200000):
    #     """
    #     RID is the last part of SID, and it is the uid of user.\n
    #     """
    #     rid = int(sid.split('-')[-1])
    #     return base_uid + rid
    force_gid:
      # If force_gid is enabled, the user's gid will be set to the following values. 
      # Otherwise, the user's gid is same with uid.
      enable: true
      gid: 1615200513
      name: lab
  local_cache:
    # If enabled is false, the local cache will be disabled.
    # When true, the user's information will be fetched from the local cache.
    # If the local cache is not found, the user's information will be fetched from AD.
    enabled: true
    connect: '/data/ad_cache.sqlite3'
    table: ad_cache

user_update:
  # If enabled is false, the uid and gid and username will be fetched from the container
  enable: true
  # If from_ad is true, the uid and gid will be fetched from AD
  # If from_ad is false, the uid and gid will be fetched 1000:1000
  from_ad: false
  # If from_ad is false, the uid and gid will use the following values
  defualt_gid: 1000
  defualt_uid: 1000
  default_group: users

  

ai:
  enable: false
  name: OPENAI_API_KEY
  key: test